{"version":3,"file":"TrashButtonAndCounter-939e9973.js","sources":["../../../../assets/images/add_cart.svg","../../../../components/TrashButtonAndCounter.vue"],"sourcesContent":["export default \"__VITE_ASSET__27638671__\"","<template>\r\n  <div>\r\n    <div\r\n      v-if=\"count == 0\"\r\n      @click=\"increment\"\r\n      class=\"relative select-none mb-[20px] hover:scale-95 transition-transform duration-150\"\r\n    >\r\n      <img\r\n        class=\"mx-auto h-9 md:h-10 md:mt-5 mt-1\"\r\n        src=\"@/assets/images/add_cart.svg\"\r\n        alt=\"\"\r\n      />\r\n      <div\r\n        class=\"absolute top-0 right-1/2 translate-x-1/2 flex items-center gap-3 text-white h-fit\"\r\n      >\r\n        <div\r\n          class=\"md:text-2xl text-lg font-alatsi uppercase whitespace-nowrap\"\r\n        >\r\n          {{ $t(\"add_to\") }}\r\n        </div>\r\n        <IconTrash\r\n          draggable=\"false\"\r\n          class=\"inline pointer-events-none mt-1 md:w-9 w-6 md:h-9 h-6\"\r\n        ></IconTrash>\r\n      </div>\r\n    </div>\r\n\r\n    <div\r\n      v-if=\"count != 0\"\r\n      class=\"w-[80%] mx-auto text-center z-50 md:h-17.5 h-13\"\r\n    >\r\n      <div\r\n        class=\"w-full font-bold justify-evenly flex gap-2 px-6 py-1 md:py-2 rounded-xl bg-[#F6F6F6]\"\r\n      >\r\n        <div\r\n          @click=\"decrement\"\r\n          class=\"cursor-pointer text-2xl text-[#3C4242] px-2 select-none\"\r\n        >\r\n          -\r\n        </div>\r\n        <div class=\"cursor-pointer text-2xl w-7 text-center\">{{ count }}</div>\r\n        <div\r\n          @click=\"increment\"\r\n          class=\"cursor-pointer text-2xl text-[#3C4242] px-2 select-none\"\r\n        >\r\n          +\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { useTrashStore } from \"~~/stores/trash\";\r\nimport { useAuthStore } from \"@/stores/authStore\";\r\nconst authStore = useAuthStore();\r\nconst trash = useTrashStore();\r\nconst props = defineProps({\r\n  item: {\r\n    type: Object,\r\n    required: true,\r\n  },\r\n  count: {\r\n    type: Number,\r\n    default: 0,\r\n  },\r\n});\r\nconst count = ref(0);\r\nif (props.count > 0) {\r\n  count.value = props.count;\r\n}\r\n\r\nconst emit = defineEmits([\"update:modelValue\"]);\r\ntrash.trash_items.products?.forEach((item, index) => {\r\n  if (item?.uuid == props.item?.uuid) {\r\n    count.value = item.count;\r\n  }\r\n});\r\n\r\nconst increment = async () => {\r\n  count.value += 1;\r\n  trash.setLocalStorage(props.item, count.value);\r\n\r\n  if (authStore.userToken) {\r\n    const { data } = await useMyFetch(\"/api/v1/client/trash/create\", {\r\n      body: {\r\n        user_id: authStore.userToken?.uuid,\r\n        product_id: props.item.uuid,\r\n        count: count.value,\r\n      },\r\n      method: \"POST\",\r\n    });\r\n  }\r\n};\r\n\r\nconst decrement = async () => {\r\n  count.value -= 1;\r\n  trash.removeLocalStorage(props.item, count.value);\r\n\r\n  if (authStore.userToken) {\r\n    const { data } = await useMyFetch(\"/api/v1/client/trash/create\", {\r\n      body: {\r\n        user_id: authStore.userToken?.uuid,\r\n        product_id: props.item.uuid,\r\n        count: count.value,\r\n      },\r\n      method: \"POST\",\r\n    });\r\n  }\r\n};\r\n</script>\r\n<style scoped></style>\r\n"],"names":["_a"],"mappings":";;;;;;;;;AAAA,MAAe,aAAA,KAAA,iBAAA,uBAAA;;;;;;;;;;;;;;;;;;ACuDG,iBAAe;AACjC,UAAM,QAAQ,cAAa;AAW3B,UAAM,QAAQ,IAAI,CAAC;AACnB,QAAI,MAAM,QAAQ,GAAG;AACnB,YAAM,QAAQ,MAAM;AAAA,IACtB;AAGA,gBAAM,YAAY,aAAlB,mBAA4B,QAAQ,CAAC,MAAM,UAAU;;AACnD,WAAI,6BAAM,WAAQA,MAAA,MAAM,SAAN,gBAAAA,IAAY,OAAM;AAClC,cAAM,QAAQ,KAAK;AAAA,MACpB;AAAA,IACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}